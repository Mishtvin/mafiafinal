import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { AccessToken, VideoGrant } from "livekit-server-sdk";
import { WebSocketServer } from "ws";
import { WebSocket } from "ws";
import { randomUUID } from 'crypto';

// LiveKit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const LIVEKIT_API_KEY = process.env.LIVEKIT_API_KEY;
const LIVEKIT_API_SECRET = process.env.LIVEKIT_API_SECRET;
const LIVEKIT_URL = 'wss://livekit.nyavkin.site/'; // URL —Å–µ—Ä–≤–µ—Ä–∞ LiveKit —Å–æ —Å–ª–µ—à–µ–º –≤ –∫–æ–Ω—Ü–µ

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–∞—Ö
interface SlotInfo {
  userId: string;
  slotNumber: number;
}

// –°–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
interface SessionData {
  userId: string;
  preferredSlot?: number;
  timestamp: number;
}

// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const SESSION_STORE = new Map<string, SessionData>();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
setInterval(() => {
  const MAX_SESSION_AGE = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
  const now = Date.now();
  
  let sessionsRemoved = 0;
  
  SESSION_STORE.forEach((data, sessionId) => {
    if (now - data.timestamp > MAX_SESSION_AGE) {
      SESSION_STORE.delete(sessionId);
      sessionsRemoved++;
    }
  });
  
  if (sessionsRemoved > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${sessionsRemoved} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π`);
  }
}, 3600000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ—Ç–∞—Ö
const slotAssignments = new Map<number, string>(); // slotNumber -> userId
const userSlots = new Map<string, number>(); // userId -> slotNumber

export async function registerRoutes(app: Express): Promise<Server> {
  // API endpoints
  app.get('/api/healthcheck', (req, res) => {
    res.json({ 
      status: 'ok', 
      timestamp: new Date().toISOString(), 
      livekit: { 
        apiKey: LIVEKIT_API_KEY ? 'configured' : 'missing',
        apiSecret: LIVEKIT_API_SECRET ? 'configured' : 'missing',
        url: LIVEKIT_URL
      }
    });
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ LiveKit (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º GET –∏ POST)
  app.get('/api/token', async (req, res) => {
    try {
      const identity = req.query.identity as string;
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º default-room, –∫–∞–∫ –≤ –≤–∞—à–µ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
      const roomName = 'default-room';
      
      if (!identity) {
        return res.status(400).json({ error: 'Missing identity parameter' });
      }
      
      if (!LIVEKIT_API_KEY || !LIVEKIT_API_SECRET) {
        return res.status(500).json({ error: 'LiveKit API credentials are not configured' });
      }
      
      console.log("Using LiveKit credentials - API Key:", LIVEKIT_API_KEY);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
      const at = new AccessToken(LIVEKIT_API_KEY, LIVEKIT_API_SECRET, {
        identity,
        ttl: 3600 * 24, // 24 —á–∞—Å–∞
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const videoGrant: VideoGrant = {
        roomJoin: true,
        room: roomName,
        canPublish: true,
        canSubscribe: true,
        canPublishData: true,
      };
      
      at.addGrant(videoGrant);
      
      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Promise –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      try {
        const jwt = await Promise.resolve(at.toJwt());
        const tokenString = String(jwt);
        
        console.log("Generated token for:", identity, "room:", roomName);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç
        return res.json({ token: tokenString, identity, room: roomName });
      } catch (tokenError) {
        console.error('Error generating token:', tokenError);
        return res.status(500).json({ error: 'Failed to generate token' });
      }
    } catch (error) {
      console.error('Error generating LiveKit token:', error);
      return res.status(500).json({ error: 'Failed to generate token' });
    }
  });
  
  // POST endpoint –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ LiveKit
  app.post('/api/livekit/token', async (req, res) => {
    try {
      const { identity, roomName, sessionId, deviceId } = req.body;
      
      if (!identity) {
        return res.status(400).json({ error: 'Missing identity parameter' });
      }
      
      const actualRoomName = roomName || 'default-room';
      
      if (!LIVEKIT_API_KEY || !LIVEKIT_API_SECRET) {
        return res.status(500).json({ error: 'LiveKit API credentials are not configured' });
      }
      
      console.log("Using LiveKit credentials for POST request - API Key:", LIVEKIT_API_KEY);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
      const at = new AccessToken(LIVEKIT_API_KEY, LIVEKIT_API_SECRET, {
        identity,
        ttl: 3600 * 24, // 24 —á–∞—Å–∞
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const videoGrant: VideoGrant = {
        roomJoin: true,
        room: actualRoomName,
        canPublish: true,
        canSubscribe: true,
        canPublishData: true,
      };
      
      at.addGrant(videoGrant);
      
      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
      try {
        const jwt = await Promise.resolve(at.toJwt());
        const tokenString = String(jwt);
        
        console.log("Generated token for POST request:", identity, "room:", actualRoomName);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let validSessionId = sessionId;
        let userSlot: number | undefined = undefined;
        
        if (sessionId && SESSION_STORE.has(sessionId)) {
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const sessionData = SESSION_STORE.get(sessionId)!;
          if (sessionData.userId === identity) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç
            userSlot = sessionData.preferredSlot;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏
            sessionData.timestamp = Date.now();
            SESSION_STORE.set(sessionId, sessionData);
            
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è ${sessionId} –¥–ª—è ${identity}, —Å–ª–æ—Ç=${userSlot}`);
          } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è - —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ${sessionData.userId}, –∞ –Ω–µ ${identity}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.`);
            validSessionId = randomUUID();
            SESSION_STORE.set(validSessionId, {
              userId: identity,
              timestamp: Date.now()
            });
          }
        } else if (!validSessionId) {
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
          validSessionId = randomUUID();
          SESSION_STORE.set(validSessionId, {
            userId: identity,
            timestamp: Date.now()
          });
          console.log(`üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è ${validSessionId} –¥–ª—è ${identity}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userSlot && userSlots.has(identity)) {
          userSlot = userSlots.get(identity);
          console.log(`üìã –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç ${userSlot} –¥–ª—è ${identity}`);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ—Ç –∏ —Å–µ—Å—Å–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç –≤ —Å–µ—Å—Å–∏–∏
        if (userSlot && validSessionId) {
          const sessionData = SESSION_STORE.get(validSessionId) || { 
            userId: identity, 
            timestamp: Date.now(),
            preferredSlot: undefined
          } as SessionData;
          
          sessionData.preferredSlot = userSlot;
          SESSION_STORE.set(validSessionId, sessionData);
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ª–æ—Ç ${userSlot} –≤ —Å–µ—Å—Å–∏–∏ ${validSessionId} –¥–ª—è ${identity}`);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç
        return res.json({ 
          token: tokenString, 
          identity, 
          room: actualRoomName,
          sessionId: validSessionId,
          slot: userSlot
        });
      } catch (tokenError) {
        console.error('Error generating token:', tokenError);
        return res.status(500).json({ error: 'Failed to generate token' });
      }
    } catch (error) {
      console.error('Error handling POST request for LiveKit token:', error);
      return res.status(500).json({ error: 'Failed to generate token' });
    }
  });

  const httpServer = createServer(app);

  // –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—É—Ç–∏
  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });
  console.log('WebSocket server initialized on path /ws');

  // –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const connections = new Map<string, WebSocket>();
  
  // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä
  const cameraStates = new Map<string, boolean>(); // userId -> –∫–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (userId -> timestamp)
  const userDisconnectTimes = new Map<string, number>();
  const SLOT_RESERVATION_TIMEOUT = 60000; // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  setInterval(() => {
    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
    const currentTime = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª–æ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º
    const validUserIds = new Set<string>(connections.keys());
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üîé –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è=${connections.size}, —Å–ª–æ—Ç—ã=${slotAssignments.size}, –ø—Ä–∏—Å–≤–æ–µ–Ω–æ=${userSlots.size}, –∫–∞–º–µ—Ä—ã=${cameraStates.size}`);
    
    // –ò—â–µ–º —Å–ª–æ—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥
    let needsUpdate = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    slotAssignments.forEach((userId, slotNumber) => {
      if (!validUserIds.has(userId)) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ
        if (!userDisconnectTimes.has(userId)) {
          userDisconnectTimes.set(userId, currentTime);
          console.log(`‚è∞ –ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ${userId} –≤ —Å–ª–æ—Ç–µ ${slotNumber}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        const disconnectTime = userDisconnectTimes.get(userId) || 0;
        const timePassed = currentTime - disconnectTime;
        
        if (timePassed > SLOT_RESERVATION_TIMEOUT) {
          // –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥ - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
          console.log(`‚åõ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ (${Math.round(timePassed/1000)}—Å) - –æ—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–∞ ${slotNumber} –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          slotAssignments.delete(slotNumber);
          userSlots.delete(userId);
          cameraStates.delete(userId);
          userDisconnectTimes.delete(userId);
          needsUpdate = true;
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
          const remainingSeconds = Math.round((SLOT_RESERVATION_TIMEOUT - timePassed) / 1000);
          console.log(`üïò –°–ª–æ—Ç ${slotNumber} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${userId} –µ—â–µ –Ω–∞ ${remainingSeconds}—Å`);
        }
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (userDisconnectTimes.has(userId)) {
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Å–ª–æ—Ç ${slotNumber}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä`);
          userDisconnectTimes.delete(userId);
        }
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É slotAssignments –∏ userSlots
    userSlots.forEach((slotNumber, userId) => {
      const assignedUserId = slotAssignments.get(slotNumber);
      if (!assignedUserId || assignedUserId !== userId) {
        console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: —Å–ª–æ—Ç ${slotNumber} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        slotAssignments.set(slotNumber, userId);
        needsUpdate = true;
      }
    });
    
    // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (needsUpdate) {
      console.log('üîÑ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤—ã–∑–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
      broadcastSlotUpdate();
      broadcastCameraStates();
    }
    
    // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã
    console.log('üìä –¢–µ–∫—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:');
    slotAssignments.forEach((userId, slot) => {
      const status = validUserIds.has(userId) ? '‚úÖ' : '‚è≥';
      console.log(`- –°–ª–æ—Ç ${slot}: ${userId} ${status}`);
    });
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    broadcastSlotUpdate();
    broadcastCameraStates();
    
    console.log(`üì° –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${connections.size}, –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã: ${slotAssignments.size}`);
  }, 5000); // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

  const pingInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥
  const pingIntervalId = setInterval(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥–∏
    connections.forEach((ws, userId) => {
      if (ws.readyState === WebSocket.CLOSED || ws.readyState === WebSocket.CLOSING) {
        // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connections.delete(userId);
        
        // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        if (!userDisconnectTimes.has(userId)) {
          userDisconnectTimes.set(userId, Date.now());
          console.log(`‚è∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è ${userId}, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
          
          const userSlot = userSlots.get(userId);
          if (userSlot !== undefined) {
            console.log(`üïí –°–ª–æ—Ç ${userSlot} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${userId} –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)`);
          }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        broadcastSlotUpdate();
        broadcastCameraStates();
      } else if (ws.readyState === WebSocket.OPEN) {
        // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        try {
          ws.send(JSON.stringify({ type: 'ping' }));
        } catch (e) {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ping
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping –¥–ª—è ${userId}:`, e);
          
          // –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
          connections.delete(userId);
          
          // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–π –æ—á–∏—Å—Ç–∫–∏
          if (!userDisconnectTimes.has(userId)) {
            userDisconnectTimes.set(userId, Date.now());
            console.log(`‚è∞ –û—à–∏–±–∫–∞ ping –¥–ª—è ${userId}, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
            
            const userSlot = userSlots.get(userId);
            if (userSlot !== undefined) {
              console.log(`üïí –°–ª–æ—Ç ${userSlot} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${userId} –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ (–æ—à–∏–±–∫–∞ ping)`);
            }
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º
          broadcastSlotUpdate();
          broadcastCameraStates();
        }
      }
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ–Ω—é —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –≤—ã—à–µ –≤ –∫–æ–¥–µ
  }, pingInterval);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π WebSocket
  wss.on('connection', (ws: WebSocket) => {
    let userId: string | null = null;
    let lastPongTime = Date.now();
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    const sendToClient = (data: any) => {
      if (ws.readyState === WebSocket.OPEN) {
        try {
          ws.send(JSON.stringify(data));
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', e);
        }
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    ws.on('message', (message: Buffer | string) => {
      try {
        const messageStr = message.toString();
        const data = JSON.parse(messageStr);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ pong –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        lastPongTime = Date.now();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        switch(data.type) {
          case 'register':
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userId = data.userId;
            if (!userId) {
              console.error('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π userId –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
              break;
            }
            
            console.log(`üÜï –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`);
            connections.set(userId, ws);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º sessionId, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
            const sessionId = data.sessionId;
            if (sessionId) {
              console.log(`üîë –ü–æ–ª—É—á–µ–Ω sessionId ${sessionId} –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${userId}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è
              if (SESSION_STORE.has(sessionId)) {
                const sessionData = SESSION_STORE.get(sessionId)!;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
                sessionData.timestamp = Date.now();
                
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –≤ —Å–µ—Å—Å–∏–∏,
                // –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if (sessionData.userId === userId && sessionData.preferredSlot) {
                  console.log(`üìã –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç ${sessionData.preferredSlot} –≤ —Å–µ—Å—Å–∏–∏ ${sessionId} –¥–ª—è ${userId}`);
                  data.preferredSlot = sessionData.preferredSlot;
                } else if (sessionData.userId !== userId) {
                  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ—Å—Å–∏–µ–π - —ç—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ
                  console.warn(`‚ö†Ô∏è SessionId ${sessionId} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ${sessionData.userId}, –∞ –Ω–µ ${userId}`);
                }
              } else {
                // –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–ª sessionId - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é`);
                SESSION_STORE.set(sessionId, {
                  userId,
                  timestamp: Date.now(),
                  preferredSlot: undefined
                } as SessionData);
              }
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            let preferredSlot: number | null = null;
            if (data.preferredSlot !== undefined && data.preferredSlot !== null) {
              preferredSlot = Number(data.preferredSlot);
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—Ç–∞
              if (isNaN(preferredSlot) || preferredSlot < 1 || preferredSlot > 12) {
                console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç: ${data.preferredSlot}`);
                preferredSlot = null;
              } else {
                console.log(`üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç: ${preferredSlot}`);
              }
            } else {
              console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±–µ–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞`);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã (–≤—ã–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            if (!cameraStates.has(userId)) {
              cameraStates.set(userId, false);
              console.log(`üì∑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã (–≤—ã–∫–ª) –¥–ª—è ${userId}`);
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Å–ª–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if (userSlots.has(userId)) {
              const currentSlot = userSlots.get(userId);
              const slotOwner = slotAssignments.get(currentSlot!);
              
              if (slotOwner === userId) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ—Ç ${currentSlot}`);
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ,
                // —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∑–Ω–∞—á–∏—Ç—å
                if (preferredSlot && preferredSlot !== currentSlot) {
                  console.log(`üîÑ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç ${currentSlot}, –Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π ${preferredSlot}`);
                }
              } else {
                // –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É userSlots –∏ slotAssignments
                console.error(`‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–æ—Ç–æ–≤: userId=${userId}, currentSlot=${currentSlot}, slotOwner=${slotOwner}`);
                userSlots.delete(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              }
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Å–ª–æ—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π
            if (!userSlots.has(userId)) {
              console.log(`üîé –ò—â–µ–º —Å–ª–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
              
              // –°–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
              const occupiedSlots = new Set<number>();
              slotAssignments.forEach((_, slot) => {
                occupiedSlots.add(slot);
              });
              
              // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º
              console.log(`üìã –ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è ${userId}:`, Array.from(occupiedSlots));
              
              let assignedSlot = false;
              
              // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç, –µ—Å–ª–∏ –æ–Ω —Å–≤–æ–±–æ–¥–µ–Ω
              if (preferredSlot && preferredSlot >= 1 && preferredSlot <= 12) {
                console.log(`üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ ${preferredSlot} –¥–ª—è ${userId}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
                if (!occupiedSlots.has(preferredSlot)) {
                  slotAssignments.set(preferredSlot, userId);
                  userSlots.set(userId, preferredSlot);
                  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç ${preferredSlot} –¥–ª—è ${userId}`);
                  assignedSlot = true;
                } else {
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ—Ç –∑–∞–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª—é—á–∏–ª—Å—è
                  const slotUserId = slotAssignments.get(preferredSlot);
                  
                  // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥—Ä—É–≥–∏–º ID, –Ω–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                  const isUserReconnectWithDifferentId = slotUserId && 
                    (slotUserId.includes(userId) || userId.includes(slotUserId) || 
                    (sessionId && SESSION_STORE.has(sessionId) && 
                     SESSION_STORE.get(sessionId)!.userId === slotUserId));
                  
                  if (isUserReconnectWithDifferentId) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Å –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–∏–º ID, –Ω–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—Ä—É–≥–∏–º ID: —Å—Ç–∞—Ä—ã–π=${slotUserId}, –Ω–æ–≤—ã–π=${userId}`);
                    
                    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    userSlots.delete(slotUserId);
                    if (connections.has(slotUserId)) {
                      connections.delete(slotUserId);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç –ø–æ–¥ –Ω–æ–≤—ã–π ID
                    slotAssignments.set(preferredSlot, userId);
                    userSlots.set(userId, preferredSlot);
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ—Ç–µ ${preferredSlot}: ${slotUserId} -> ${userId}`);
                    assignedSlot = true;
                  }
                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  else if (slotUserId && !connections.has(slotUserId)) {
                    // –°–ª–æ—Ç –∑–∞–Ω—è—Ç –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –º–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∏ –∑–∞–Ω—è—Ç—å
                    console.log(`‚ôªÔ∏è –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç ${preferredSlot} –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${slotUserId}`);
                    slotAssignments.delete(preferredSlot);
                    userSlots.delete(slotUserId);
                    
                    // –ó–∞–Ω–∏–º–∞–µ–º —Å–ª–æ—Ç —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    slotAssignments.set(preferredSlot, userId);
                    userSlots.set(userId, preferredSlot);
                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç ${preferredSlot} –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏`);
                    assignedSlot = true;
                  } else {
                    console.log(`üö´ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç ${preferredSlot} —É–∂–µ –∑–∞–Ω—è—Ç –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${slotUserId}`);
                  }
                }
              }
              
              // –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –∑–∞–Ω—è—Ç, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π
              if (!assignedSlot) {
                // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª–æ—Ç–æ–≤ 11 –∏ 12
                const prioritySlots = preferredSlot && (preferredSlot === 11 || preferredSlot === 12) 
                  ? [preferredSlot] // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π 11/12
                  : [];
                
                // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã
                const allSlots = [...prioritySlots];
                for (let i = 1; i <= 12; i++) {
                  if (!prioritySlots.includes(i)) {
                    allSlots.push(i);
                  }
                }
                
                // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                for (const slotToCheck of allSlots) {
                  if (!occupiedSlots.has(slotToCheck)) {
                    slotAssignments.set(slotToCheck, userId);
                    userSlots.set(userId, slotToCheck);
                    console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–ª–æ—Ç ${slotToCheck} –¥–ª—è ${userId}`);
                    assignedSlot = true;
                    break;
                  }
                }
              }
              
              if (!assignedSlot) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è ${userId}, –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã`);
              }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            broadcastSlotUpdate();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            broadcastCameraStates();
            break;
            
          case 'select_slot':
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ—Ç
            if (!userId) {
              console.error('‚ùå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –±–µ–∑ userId');
              break;
            }
            
            const selectedSlot = Number(data.slotNumber); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É
            if (isNaN(selectedSlot) || selectedSlot < 1 || selectedSlot > 12) {
              console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞: ${data.slotNumber}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
              sendToClient({
                type: 'error',
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞'
              });
              break;
            }
            
            console.log(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç ${selectedSlot}`);
            const previousSlot = userSlots.get(userId);
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ—Ç, –µ—Å–ª–∏ –±—ã–ª
            if (previousSlot !== undefined) {
              slotAssignments.delete(previousSlot);
              console.log(`üìã –û—Å–≤–æ–±–æ–¥–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ—Ç ${previousSlot} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
            const currentOccupant = slotAssignments.get(selectedSlot);
            if (currentOccupant && currentOccupant !== userId) {
              // –°–ª–æ—Ç –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
              console.log(`üö´ –°–ª–æ—Ç ${selectedSlot} —É–∂–µ –∑–∞–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${currentOccupant}`);
              sendToClient({
                type: 'slot_busy',
                slotNumber: selectedSlot
              });
              
              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ—Ç, –µ—Å–ª–∏ –±—ã–ª
              if (previousSlot !== undefined) {
                slotAssignments.set(previousSlot, userId);
                console.log(`‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ—Ç ${previousSlot} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
              }
              break;
            }
            
            // –ó–∞–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
            slotAssignments.set(selectedSlot, userId);
            userSlots.set(userId, selectedSlot);
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç ${selectedSlot}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            broadcastSlotUpdate();
            break;
            
          case 'release_slot':
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–ª–æ—Ç
            if (!userId) break;
            
            const slotToRelease = userSlots.get(userId);
            if (slotToRelease !== undefined) {
              slotAssignments.delete(slotToRelease);
              userSlots.delete(userId);
              
              console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Å–≤–æ–±–æ–¥–∏–ª —Å–ª–æ—Ç ${slotToRelease}`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
              broadcastSlotUpdate();
            }
            break;
            
          case 'camera_state_change':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä—ã
            if (!userId) break;
            
            const isEnabled = Boolean(data.enabled);
            cameraStates.set(userId, isEnabled);
            
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${isEnabled ? '–≤–∫–ª—é—á–∏–ª' : '–≤—ã–∫–ª—é—á–∏–ª'} –∫–∞–º–µ—Ä—É`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            broadcastCameraStates();
            break;
            
          case 'pong':
            // –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping
            lastPongTime = Date.now();
            break;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket:', error);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const connectionCheckInterval = setInterval(() => {
      const now = Date.now();
      if (now - lastPongTime > 15000) { // 15 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        console.log(`‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è ${userId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`);
        
        if (userId) {
          // –ù–ï —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –∏ –∫–∞–º–µ—Ä–µ!
          // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–π –æ—á–∏—Å—Ç–∫–∏
          if (!userDisconnectTimes.has(userId)) {
            userDisconnectTimes.set(userId, now);
            const userSlot = userSlots.get(userId);
            console.log(`‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ${userId} –≤ —Å–ª–æ—Ç–µ ${userSlot || '–Ω–µ—Ç'}`);
          }
          
          // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
          connections.delete(userId);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
          broadcastSlotUpdate();
          broadcastCameraStates();
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ws.terminate();
        clearInterval(connectionCheckInterval);
      }
    }, 5000);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    ws.on('close', () => {
      clearInterval(connectionCheckInterval);
      
      if (userId) {
        // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const disconnectTime = Date.now();
        const userSlot = userSlots.get(userId);
        
        console.log(`‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${userId}, —Å–ª–æ—Ç: ${userSlot || '–Ω–µ—Ç'}`);
        
        // –í–∞–∂–Ω–æ: –ù–ï –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç —Å—Ä–∞–∑—É, –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ª–æ—Ç–∞
        // –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–ª–æ—Ç–æ–≤ 11 –∏ 12, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –æ—Å–æ–±—É—é —Ä–æ–ª—å
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ (–≤–º–µ—Å—Ç–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è)
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connections.delete(userId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        // –ù–ï —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–∞–º–µ—Ä—ã!
        // –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
        broadcastSlotUpdate();
        broadcastCameraStates();
        
        console.log(`üïê –°–ª–æ—Ç ${userSlot} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${userId} –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    ws.on('error', (error) => {
      console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
      clearInterval(connectionCheckInterval);
    });
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  function broadcastSlotUpdate() {
    const currentSlots: SlotInfo[] = [];
    slotAssignments.forEach((userId, slotNumber) => {
      currentSlots.push({ userId, slotNumber });
    });
    
    const updateMessage = JSON.stringify({
      type: 'slots_update',
      slots: currentSlots
    });
    
    connections.forEach((ws) => {
      if (ws.readyState === WebSocket.OPEN) {
        try {
          ws.send(updateMessage);
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', e);
        }
      }
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  function broadcastCameraStates() {
    const currentCameraStates: Record<string, boolean> = {};
    cameraStates.forEach((enabled, userId) => {
      currentCameraStates[userId] = enabled;
    });
    
    const updateMessage = JSON.stringify({
      type: 'camera_states_update',
      cameraStates: currentCameraStates
    });
    
    connections.forEach((ws) => {
      if (ws.readyState === WebSocket.OPEN) {
        try {
          ws.send(updateMessage);
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä:', e);
        }
      }
    });
  }

  return httpServer;
}
