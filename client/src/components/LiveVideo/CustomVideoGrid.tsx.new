import { 
  ParticipantTile, 
  useParticipants, 
  useTracks,
  VideoTrack,
  TrackReferenceOrPlaceholder
} from '@livekit/components-react';
import { Track, Participant, Room } from 'livekit-client';
import React, { useEffect, useState, useMemo, useCallback } from 'react';
import { useSlots } from '../../hooks/use-slots';

/**
 * Основной контейнер сетки видео
 * Разделяем логику на контейнер и сам грид для оптимизации перерисовок
 */
export function CustomVideoGrid() {
  const participants = useParticipants();
  const [currentLocalParticipant] = participants.filter(p => p.isLocal);
  
  // Используем хук для синхронизации слотов с реальным идентификатором
  const userIdentity = currentLocalParticipant?.identity || 'unknown-user';
  console.log('Local participant identity:', userIdentity);
  const slotsManager = useSlots(userIdentity);
  
  // Автоматически выбираем слот для локального участника при подключении
  useEffect(() => {
    if (currentLocalParticipant && slotsManager.connected && !slotsManager.userSlot) {
      // Находим первый свободный слот
      for (let i = 0; i < 12; i++) {
        const slotNumber = i + 1;
        if (!slotsManager.slots[slotNumber]) {
          slotsManager.selectSlot(slotNumber);
          break;
        }
      }
    }
  }, [currentLocalParticipant, slotsManager.connected, slotsManager.userSlot]);
  
  // Создаем мапу для участников
  const participantsMap = useMemo(() => {
    const map = new Map<string, Participant>();
    participants.forEach(p => {
      map.set(p.identity, p);
      console.log(`Найден участник: ${p.identity}, isLocal: ${p.isLocal}`);
    });
    return map;
  }, [participants]);
  
  // Debug
  useEffect(() => {
    if (slotsManager.connected) {
      console.log('Slots state:', Object.entries(slotsManager.slots));
      console.log('User slot:', slotsManager.userSlot);
    }
  }, [slotsManager.slots, slotsManager.userSlot, slotsManager.connected]);

  // Принудительно отображаем локального участника в его слоте
  // даже если в мапе слотов не совпадают идентификаторы
  useEffect(() => {
    if (currentLocalParticipant && slotsManager.userSlot && slotsManager.connected) {
      // Добавляем текущего участника принудительно в его слот
      slotsManager.slots[slotsManager.userSlot] = currentLocalParticipant.identity;
      console.log(`Принудительное обновление: слот ${slotsManager.userSlot} для ${currentLocalParticipant.identity}`);
    }
  }, [currentLocalParticipant, slotsManager.userSlot, slotsManager.connected]);
  
  // Обработчик клика по пустому слоту
  const handleSlotClick = useCallback((slotNumber: number) => {
    if (slotsManager.connected) {
      slotsManager.selectSlot(slotNumber);
    }
  }, [slotsManager]);

  // Логируем рендер контейнера
  console.log('[RENDER] CustomVideoGrid контейнер - перерисовывается при любых изменениях состояния');
  
  // Рендерим сетку слотов
  return (
    <div className="h-full w-full p-4">
      <VideoGrid 
        slots={slotsManager.slots}
        userSlot={slotsManager.userSlot}
        participantsMap={participantsMap}
        currentLocalParticipant={currentLocalParticipant}
        onSlotClick={handleSlotClick}
      />
    </div>
  );
}

/**
 * Отдельный компонент для сетки, использующий индивидуальные ячейки
 */
function VideoGrid({
  slots,
  userSlot,
  participantsMap,
  currentLocalParticipant,
  onSlotClick
}: {
  slots: Record<number, string>;
  userSlot: number | null;
  participantsMap: Map<string, Participant>;
  currentLocalParticipant: Participant | undefined;
  onSlotClick: (slotNumber: number) => void;
}) {
  // Создаем сетку из 12 слотов
  const slotNumbers = useMemo(() => {
    return Array.from({ length: 12 }, (_, i) => i + 1);
  }, []);

  console.log('[RENDER] VideoGrid - основная сетка');

  return (
    <div className="video-grid">
      {slotNumbers.map((slotNumber: number) => (
        <GridSlot
          key={`grid-slot-${slotNumber}`}
          slotNumber={slotNumber}
          slots={slots}
          userSlot={userSlot}
          participantsMap={participantsMap}
          currentLocalParticipant={currentLocalParticipant}
          onSlotClick={onSlotClick}
        />
      ))}
    </div>
  );
}

/**
 * Изолированная ячейка сетки, которая самостоятельно отслеживает 
 * изменения состояний и обновляется только когда нужно
 */
const GridSlot = React.memo(function GridSlot({
  slotNumber,
  slots,
  userSlot,
  participantsMap,
  currentLocalParticipant,
  onSlotClick
}: {
  slotNumber: number;
  slots: Record<number, string>;
  userSlot: number | null;
  participantsMap: Map<string, Participant>;
  currentLocalParticipant: Participant | undefined;
  onSlotClick: (slotNumber: number) => void;
}) {
  // Получаем ID пользователя в этом слоте
  const userId = slots[slotNumber];
  
  // Определяем, является ли этот слот слотом текущего пользователя
  const isCurrentUserSlot = userSlot === slotNumber && currentLocalParticipant;
  
  // Получаем объект участника
  const participant = isCurrentUserSlot 
    ? currentLocalParticipant 
    : (userId ? participantsMap.get(userId) : undefined);
  
  // Получаем доступ к состоянию камер для данного участника
  const slotsContext = useSlots(currentLocalParticipant?.identity || 'unknown-user');
  
  // Локальное состояние для отслеживания изменений камеры
  const [cameraUpdateCounter, setCameraUpdateCounter] = useState<number>(0);
  
  // Эффект для отслеживания изменений камеры этого конкретного участника
  useEffect(() => {
    // Проверяем, изменилась ли камера этого участника
    if (
      userId && 
      slotsContext.lastUpdatedCamera === userId && 
      slotsContext.cameraUpdateTimestamp
    ) {
      // Увеличиваем счетчик обновлений камеры, что вызовет перерисовку только этого слота
      setCameraUpdateCounter(prev => prev + 1);
      console.log(`[SLOT ${slotNumber}] Обнаружено изменение камеры для ${userId}`);
    }
  }, [userId, slotsContext.lastUpdatedCamera, slotsContext.cameraUpdateTimestamp, slotNumber]);
  
  // Если нет участника, отображаем пустой слот
  if (!participant) {
    return (
      <EmptySlot 
        index={slotNumber - 1}
        onClick={() => onSlotClick(slotNumber)}
      />
    );
  }

  // Отображаем слот с участником
  return (
    <ParticipantSlot 
      participant={participant} 
      slotNumber={slotNumber}
      cameraUpdateCounter={cameraUpdateCounter}
    />
  );
}, (prevProps, nextProps) => {
  // Сравниваем пользователя в слоте
  const prevUserId = prevProps.slots[prevProps.slotNumber];
  const nextUserId = nextProps.slots[nextProps.slotNumber];
  
  // Если изменился пользователь в слоте - перерисовываем
  if (prevUserId !== nextUserId) {
    return false;
  }
  
  // Проверяем изменение флага текущего пользователя
  const prevIsCurrentUserSlot = prevProps.userSlot === prevProps.slotNumber && prevProps.currentLocalParticipant;
  const nextIsCurrentUserSlot = nextProps.userSlot === nextProps.slotNumber && nextProps.currentLocalParticipant;
  
  if (prevIsCurrentUserSlot !== nextIsCurrentUserSlot) {
    return false;
  }
  
  // Проверяем изменение ссылки на currentLocalParticipant, если это слот текущего пользователя
  if (prevIsCurrentUserSlot && 
      prevProps.currentLocalParticipant?.identity !== nextProps.currentLocalParticipant?.identity) {
    return false;
  }
  
  // Во всех остальных случаях не перерисовываем
  return true;
});

/**
 * Props для компонента StableVideoTrack
 */
interface StableVideoTrackProps {
  participant: Participant;
  cameraUpdateCounter: number;
}

/**
 * Стабильный компонент для отображения видеотрека участника
 * Оптимизирован для минимизации перерисовок
 */
const StableVideoTrack = React.memo(
  ({ participant, cameraUpdateCounter }: StableVideoTrackProps) => {
    // Сохраняем идентификатор для логов
    const identity = participant.identity;
    
    // Логируем счетчик обновлений
    console.log(`[VIDEO] Обновление трека для ${identity}, счетчик: ${cameraUpdateCounter}`);
    
    // Получаем список видеотреков
    const videoTracks = useTracks(
      [Track.Source.Camera],
      { onlySubscribed: true }
    ).filter(track => track.participant.identity === identity);
    
    const hasVideo = videoTracks.length > 0;
    
    // Используем useRef для предотвращения перерисовки при изменении
    // состояния трека, но сохраняем последнее состояние для отладки
    const lastTrackState = React.useRef<{hasVideo: boolean, trackId: string}>({
      hasVideo: false,
      trackId: '',
    });
    
    // Логируем изменения состояния трека, но только если оно изменилось
    const currentTrackId = hasVideo ? videoTracks[0].trackSid : '';
    if (lastTrackState.current.hasVideo !== hasVideo || 
        lastTrackState.current.trackId !== currentTrackId) {
      console.log(`[TRACK] Изменение статуса видео для ${identity}: ${hasVideo ? 'включено' : 'выключено'} (trackId: ${currentTrackId})`);
      
      lastTrackState.current = {
        hasVideo,
        trackId: currentTrackId
      };
    }
    
    if (hasVideo) {
      return (
        <div className="h-full w-full relative flex items-center justify-center">
          <VideoTrack 
            trackRef={videoTracks[0]}
            className="h-full w-full object-cover"
          />
          <div className="absolute inset-0 ring-1 ring-white/10"></div>
        </div>
      );
    } else {
      return (
        <div className="flex items-center justify-center h-full">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 text-slate-500" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={1} 
              d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" 
            />
          </svg>
        </div>
      );
    }
  },
  // Строгий компаратор для предотвращения перерисовки
  (prevProps, nextProps) => {
    // Проверяем изменение счетчика обновлений
    if (prevProps.cameraUpdateCounter !== nextProps.cameraUpdateCounter) {
      return false; // Если счетчик изменился, разрешаем перерисовку
    }
    
    // Сравниваем идентификаторы участников
    return prevProps.participant.identity === nextProps.participant.identity;
  }
);

/**
 * Prop для компонента ParticipantSlot с счетчиком обновлений камеры
 */
interface ParticipantSlotProps {
  participant: Participant;
  slotNumber: number;
  cameraUpdateCounter: number;
}

/**
 * Компонент для отображения одного участника 
 * Обернут в React.memo для предотвращения лишних перерисовок
 */
const ParticipantSlot = React.memo(
  ({ participant, slotNumber, cameraUpdateCounter }: ParticipantSlotProps) => {
    // Отслеживаем перерисовки
    console.log(`[RENDER] ParticipantSlot ${slotNumber} для ${participant.identity}`);
    
    // Получаем только неизменяемые иммутабельные пропсы для стабильности рендеринга
    const isLocal = participant.isLocal;
    const identity = participant.identity;
    
    return (
      <div className="video-slot relative overflow-hidden rounded-xl shadow-md bg-slate-800 border border-slate-700">
        <StableVideoTrack 
          participant={participant}
          cameraUpdateCounter={cameraUpdateCounter}
        />
        
        {/* Номер слота в левом нижнем углу */}
        <div 
          className={`absolute bottom-2 left-2 py-0.5 px-2 rounded-md text-xs text-white font-medium backdrop-blur-sm z-10 
            ${isLocal ? 'bg-purple-700/90' : 'bg-slate-900/80'}`}
        >
          {slotNumber === 12 ? "Ведуча" : slotNumber}
        </div>
        
        {/* Имя пользователя рядом с номером слота */}
        <div className="absolute bottom-2 left-8 bg-slate-900/80 py-0.5 px-2 rounded-md text-xs text-white font-medium backdrop-blur-sm">
          {identity}
        </div>
      </div>
    );
  },
  // Строгий компаратор для сравнения пропсов
  (prevProps, nextProps) => {
    // Сравниваем счетчик обновлений камеры
    if (prevProps.cameraUpdateCounter !== nextProps.cameraUpdateCounter) {
      return false; // Если счетчик изменился, разрешаем перерисовку
    }
    
    // Сравниваем идентификатор и номер слота
    return (
      prevProps.slotNumber === nextProps.slotNumber &&
      prevProps.participant.identity === nextProps.participant.identity &&
      prevProps.participant.isLocal === nextProps.participant.isLocal
    );
  }
);

/**
 * Компонент для отображения пустого слота
 */
const EmptySlot = React.memo(({ index, onClick }: { index: number; onClick?: () => void }) => {
  console.log(`[RENDER] EmptySlot ${index + 1}`);
  return (
    <div 
      className="video-slot relative overflow-hidden rounded-xl shadow-inner bg-slate-800/20 border border-slate-700/30 cursor-pointer"
      onClick={onClick}
    >
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="flex flex-col items-center justify-center">
          <div className="bg-slate-800/40 p-2 rounded-full mb-1">
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="h-10 w-10 text-slate-500" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={1} 
                d="M12 4v16m8-8H4" 
              />
            </svg>
          </div>
        </div>
      </div>
      {/* Только номер слота для пустого слота */}
      <div className="absolute bottom-2 left-2 bg-slate-900/80 py-0.5 px-2 rounded-md text-xs text-white font-medium backdrop-blur-sm z-10">
        {index + 1 === 12 ? "Ведуча" : index + 1}
      </div>
    </div>
  );
});