import { useEffect, useState, useRef } from 'react';
import { useRoomContext } from './CustomLiveKitRoom';
import { LocalParticipant, Track, TrackPublication } from 'livekit-client';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TrackHealthMonitor —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–æ–≤ –∏ –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö, –æ—à–∏–±–∫–∞—Ö, –∏ –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
 * –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ
 */
export default function TrackHealthMonitor() {
  const room = useRoomContext();
  const [localParticipant, setLocalParticipant] = useState<LocalParticipant | null>(null);
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
  const [trackStats, setTrackStats] = useState<{
    trackId: string;
    kind: string;
    bytesSent: number;
    bytesReceived: number;
    packetsLost: number;
    lastActive: number;
    resolution: string;
    frameRate: number;
    frozen: boolean;
    lastBytesSent: number;
    lastBytesReceived: number;
    lastCheckTime: number;
    bitrateSent: number;
    bitrateReceived: number;
  }[]>([]);
  
  // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
  const errorCountRef = useRef<Record<string, number>>({});
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);
  
  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  useEffect(() => {
    if (room && room.localParticipant) {
      setLocalParticipant(room.localParticipant);
    }
  }, [room]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–∫–∞
  const getTrackStats = async (pub: TrackPublication) => {
    if (!pub.track) return null;
    
    try {
      let stats: any = null;
      
      // –¢–∞–∫ –∫–∞–∫ getStats –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö LiveKit,
      // –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—è–º–∏
      if ('getStats' in pub.track && typeof (pub.track as any).getStats === 'function') {
        stats = await (pub.track as any).getStats();
      }
      
      return stats;
    } catch (e) {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      const trackId = pub.trackSid;
      errorCountRef.current[trackId] = (errorCountRef.current[trackId] || 0) + 1;
      console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–∞ ${trackId}:`, e);
      return null;
    }
  };
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  useEffect(() => {
    if (!localParticipant) return;
    
    const updateStats = async () => {
      try {
        const tracks = localParticipant.getTrackPublications();
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç—Ä–µ–∫–∞–º
        const newStats = await Promise.all(
          tracks.map(async (pub) => {
            const trackId = pub.trackSid;
            const kind = pub.kind;
            const rawStats = await getTrackStats(pub);
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞
            const currentTrackStats = trackStats.find(s => s.trackId === trackId) || {
              trackId,
              kind,
              bytesSent: 0,
              bytesReceived: 0,
              packetsLost: 0,
              lastActive: Date.now(),
              resolution: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
              frameRate: 0,
              frozen: false,
              lastBytesSent: 0,
              lastBytesReceived: 0,
              lastCheckTime: Date.now(),
              bitrateSent: 0,
              bitrateReceived: 0
            };
            
            let bytesSent = currentTrackStats.bytesSent;
            let bytesReceived = currentTrackStats.bytesReceived;
            let packetsLost = currentTrackStats.packetsLost;
            let resolution = currentTrackStats.resolution;
            let frameRate = currentTrackStats.frameRate;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (rawStats && Array.isArray(rawStats)) {
              for (const stat of rawStats) {
                if (stat.type === 'outbound-rtp' || stat.type === 'outboundrtp') {
                  bytesSent = stat.bytesSent || bytesSent;
                  frameRate = stat.framesPerSecond || frameRate;
                }
                
                if (stat.type === 'inbound-rtp' || stat.type === 'inboundrtp') {
                  bytesReceived = stat.bytesReceived || bytesReceived;
                  packetsLost = stat.packetsLost || packetsLost;
                  frameRate = stat.framesPerSecond || frameRate;
                }
                
                if (stat.frameWidth && stat.frameHeight) {
                  resolution = `${stat.frameWidth}x${stat.frameHeight}`;
                }
              }
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç (–±–∏—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É)
            const now = Date.now();
            const timeElapsed = (now - currentTrackStats.lastCheckTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            const bitrateSent = timeElapsed > 0 
              ? Math.round((bytesSent - currentTrackStats.lastBytesSent) * 8 / timeElapsed) 
              : currentTrackStats.bitrateSent;
              
            const bitrateReceived = timeElapsed > 0 
              ? Math.round((bytesReceived - currentTrackStats.lastBytesReceived) * 8 / timeElapsed) 
              : currentTrackStats.bitrateReceived;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º–æ—Ä–æ–∂–µ–Ω –ª–∏ —Ç—Ä–µ–∫
            // –¢—Ä–µ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–º –µ—Å–ª–∏ –±–∏—Ç—Ä–µ–π—Ç —Ä–∞–≤–µ–Ω 0 –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            const frozen = (kind === 'video' && bitrateSent === 0 && bytesSent > 0);
            
            // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const lastActive = frozen ? currentTrackStats.lastActive : now;
            
            return {
              trackId,
              kind,
              bytesSent,
              bytesReceived,
              packetsLost,
              lastActive,
              resolution,
              frameRate,
              frozen,
              lastBytesSent: bytesSent,
              lastBytesReceived: bytesReceived,
              lastCheckTime: now,
              bitrateSent,
              bitrateReceived
            };
          })
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTrackStats(newStats.filter(Boolean) as any);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        for (const stat of newStats) {
          if (stat && stat.frozen && stat.kind === 'video') {
            const frozenTime = Math.round((Date.now() - stat.lastActive) / 1000);
            console.warn(`–í–∏–¥–µ–æ—Ç—Ä–µ–∫ ${stat.trackId} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ ${frozenTime} —Å–µ–∫—É–Ω–¥.`);
          }
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–∫–æ–≤:', e);
      }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    intervalRef.current = setInterval(updateStats, 1000);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updateStats();
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [localParticipant]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatBitrate = (bps: number) => {
    if (bps < 1000) return `${bps} –±–∏—Ç/—Å`;
    if (bps < 1000000) return `${(bps / 1000).toFixed(1)} –ö–±–∏—Ç/—Å`;
    return `${(bps / 1000000).toFixed(1)} –ú–±–∏—Ç/—Å`;
  };
  
  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getStatusColor = (stat: typeof trackStats[0]) => {
    if (stat.frozen) return 'text-red-500';
    if (stat.kind === 'video' && stat.bitrateSent < 100000) return 'text-yellow-500';
    return 'text-green-500';
  };
  
  return (
    <div className="bg-slate-800 border border-slate-700 rounded-lg p-2 text-xs text-slate-200 w-64 shadow-lg">
      <h3 className="font-semibold mb-2">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–∫–æ–≤</h3>
      
      {trackStats.length === 0 ? (
        <div className="text-slate-400">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤</div>
      ) : (
        <div className="space-y-2">
          {trackStats.map(stat => (
            <div key={stat.trackId} className="border-t border-slate-700 pt-1">
              <div className={`font-semibold ${getStatusColor(stat)}`}>
                {stat.kind === 'video' ? 'üìπ' : 'üé§'} 
                {stat.trackId.substring(0, 10)}...
                {stat.frozen && ' (–∑–∞–º–æ—Ä–æ–∂–µ–Ω)'}
              </div>
              
              <div className="flex justify-between">
                <span>–û—Ç–ø—Ä–∞–≤–∫–∞:</span>
                <span>{formatBitrate(stat.bitrateSent)}</span>
              </div>
              
              {stat.kind === 'video' && (
                <div className="flex justify-between">
                  <span>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</span>
                  <span>{stat.resolution}</span>
                </div>
              )}
              
              {stat.kind === 'video' && (
                <div className="flex justify-between">
                  <span>–ö–∞–¥—Ä/—Å:</span>
                  <span>{stat.frameRate.toFixed(1)}</span>
                </div>
              )}
              
              {stat.packetsLost > 0 && (
                <div className="flex justify-between text-red-400">
                  <span>–ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤:</span>
                  <span>{stat.packetsLost}</span>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}