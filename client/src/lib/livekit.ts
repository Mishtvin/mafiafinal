// Token endpoint details
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
const TOKEN_ENDPOINT = '/api/livekit/token';

// –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ device ID –≤ localStorage
const DEVICE_ID_KEY = 'mafia_device_id';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ localStorage –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π,
 * –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–≥–æ –µ—â–µ –Ω–µ—Ç. –≠—Ç–æ—Ç ID —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏.
 */
function getStableDeviceId(): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ localStorage
  let deviceId = localStorage.getItem(DEVICE_ID_KEY);
  
  if (!deviceId) {
    // –ï—Å–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏
    const randomPart1 = Math.floor(Math.random() * 9000) + 1000; // 1000-9999
    const randomPart2 = Math.floor(Math.random() * 9000) + 1000; // 1000-9999
    deviceId = `${randomPart1}-${randomPart2}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π
    localStorage.setItem(DEVICE_ID_KEY, deviceId);
    console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', deviceId);
  } else {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', deviceId);
  }
  
  return deviceId;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
 * –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ —É–Ω–∏–∫–∞–ª–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */
function generateStableIdentity(baseIdentity: string): string {
  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const deviceId = getStableDeviceId();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ base-deviceId
  return `${baseIdentity}-${deviceId}`;
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è window, –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
declare global {
  interface Window {
    currentUserIdentity: string;
  }
}

/**
 * Fetches a LiveKit token from the token service
 * 
 * @param identity The participant's identity/username
 * @param roomName Optional room name to join (defaults to server-side default)
 * @returns A Promise resolving to a LiveKit token
 */
export async function fetchToken(identity: string, roomName?: string): Promise<string> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
    const stableIdentity = generateStableIdentity(identity);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ–±-—Å–æ–∫–µ—Ç–∞—Ö –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    window.currentUserIdentity = stableIdentity;
    
    console.log('üîë –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ ID:', { identity: stableIdentity, roomName });
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', stableIdentity);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage, –µ—Å–ª–∏ –µ—Å—Ç—å
    let sessionId = localStorage.getItem('mafia_session_id');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å JSON —Ç–µ–ª–æ–º
    const response = await fetch(TOKEN_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        identity: stableIdentity,
        roomName,
        sessionId,  // –ü–µ—Ä–µ–¥–∞–µ–º ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        deviceId: getStableDeviceId()  // –ü–µ—Ä–µ–¥–∞–µ–º deviceId –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', errorText);
      throw new Error(`Token request failed: ${response.status} ${errorText}`);
    }
    
    // Parse response
    const data = await response.json();
    
    // The server returns { token, identity, room, sessionId }
    if (!data.token) {
      throw new Error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ID —Å–µ—Å—Å–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if (data.sessionId) {
      localStorage.setItem('mafia_session_id', data.sessionId);
      console.log('üîë –°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–µ—Å—Å–∏–∏:', data.sessionId);
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (data.slot) {
      console.log('üéØ –°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ—Ç:', data.slot);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç –≤ localStorage 
      // (—ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)
      try {
        localStorage.setItem('mafia_user_slot', JSON.stringify({
          userId: stableIdentity,
          slotNumber: data.slot,
          timestamp: Date.now()
        }));
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤ localStorage:', data.slot);
      } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –≤ localStorage:', e);
      }
    }
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', data.room, '–Ω–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–∞:', data.token.substring(0, 20) + '...');
    
    return data.token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ LiveKit:', error);
    throw error;
  }
}
