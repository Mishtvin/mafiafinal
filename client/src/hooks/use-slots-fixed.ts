import { useState, useEffect, useCallback, useRef } from 'react';

// –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –≤ localStorage —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤/—É—Å—Ç—Ä–æ–π—Å—Ç–≤
const SLOT_STORAGE_KEY_BASE = 'mafia_user_slot';

// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–µ—Å—Å–∏–∏
// —á—Ç–æ–±—ã —Å–ª–æ—Ç—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
function getStorageKey(userId: string) {
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ userId
  return `${SLOT_STORAGE_KEY_BASE}_${userId}`;
}

export interface SlotInfo {
  userId: string;
  slotNumber: number;
}

export interface SlotsState {
  slots: Record<number, string>; // slotNumber -> userId
  userSlot: number | null;
  loading: boolean;
  connected: boolean;
  error: string | null;
  cameraStates: Record<string, boolean>; // userId -> cameraOn
}

export function useSlots(userId: string) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—É–∫–∞
  const [state, setState] = useState<SlotsState>({
    slots: {},
    userSlot: null,
    loading: true,
    connected: false,
    error: null,
    cameraStates: {}
  });

  const socketRef = useRef<WebSocket | null>(null);
  const userIdRef = useRef(userId);
  const reconnectAttempts = useRef(0);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–µ –≤ localStorage
  const saveSlotToStorage = useCallback((slotNumber: number) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const storageKey = getStorageKey(userId);
      
      // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const data = {
        userId: userId,
        slotNumber: slotNumber,
        timestamp: Date.now(),
        globalIdentity: window.currentUserIdentity || 'not_set',
        origin: window.location.origin,
        device: navigator.userAgent.substring(0, 50)
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem(storageKey, JSON.stringify(data));
      
      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ —Å—Ç–∞—Ä–æ–º—É –∫–ª—é—á—É
      localStorage.setItem(SLOT_STORAGE_KEY_BASE, JSON.stringify(data));
      
      console.log(`–°–õ–û–¢ –°–û–•–†–ê–ù–ï–ù: ${slotNumber} –¥–ª—è ${userId} [–∫–ª—é—á: ${storageKey}]`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const savedData = localStorage.getItem(storageKey);
      if (savedData) {
        try {
          const parsedData = JSON.parse(savedData);
          console.log(`‚úÖ –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø: ${parsedData.slotNumber} –¥–ª—è ${parsedData.userId}`);
        } catch (e) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, e);
        }
      }
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞:', error);
    }
  }, [userId]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
  const getSavedSlot = useCallback(() => {
    try {
      console.log(`üîç –ü–û–ü–´–¢–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–õ–û–¢–ê –¥–ª—è ${userId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É
      const storageKey = getStorageKey(userId);
      let savedData = localStorage.getItem(storageKey);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      if (!savedData) {
        savedData = localStorage.getItem(SLOT_STORAGE_KEY_BASE);
        if (savedData) {
          console.log(`üîÑ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á–∞`);
        }
      }
      
      if (!savedData) {
        console.log(`‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${userId}`);
        return null;
      }
      
      // –†–∞—Å–ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${savedData.substring(0, 100)}...`);
      const data = JSON.parse(savedData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!data || typeof data !== 'object' || !data.slotNumber) {
        console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage:`, data);
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userId –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
      const globalId = window.currentUserIdentity;
      const currentId = userId;
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:`, {
        '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ-userId': data.userId,
        '—Ç–µ–∫—É—â–∏–π-userId': currentId,
        '–≥–ª–æ–±–∞–ª—å–Ω—ã–π-userId': globalId
      });
      
      // –£—Å–ª–æ–≤–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:
      // 1. –ï—Å–ª–∏ userId –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º userId
      // 2. –ò–ª–∏ –µ—Å–ª–∏ userId –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
      // 3. –ò–ª–∏ –µ—Å–ª–∏ globalIdentity –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º userId –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
      if (
        data.userId === currentId || 
        (globalId && data.userId === globalId) ||
        (data.globalIdentity && (data.globalIdentity === currentId || data.globalIdentity === globalId))
      ) {
        console.log(`‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –°–õ–û–¢ ${data.slotNumber} –¥–ª—è ${userId}`);
        
        // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        saveSlotToStorage(data.slotNumber);
        
        return data.slotNumber;
      } else {
        console.log(`‚ùå –î–∞–Ω–Ω—ã–µ –≤ localStorage –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`, {
          '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ': data.userId,
          '—Ç–µ–∫—É—â–∏–π': currentId,
          '–≥–ª–æ–±–∞–ª—å–Ω—ã–π': globalId
        });
      }
    } catch (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞:', error);
    }
    return null;
  }, [userId, saveSlotToStorage]);

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–µ –≤ localStorage
  const clearSlotStorage = useCallback(() => {
    try {
      const storageKey = getStorageKey(userId);
      
      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É, –∏ –ø–æ —Å—Ç–∞—Ä–æ–º—É –∫–ª—é—á—É
      localStorage.removeItem(storageKey);
      localStorage.removeItem(SLOT_STORAGE_KEY_BASE);
      
      console.log(`üóëÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ –¥–ª—è ${userId} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ localStorage`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–µ:', error);
      return false;
    }
  }, [userId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
  const sendMessage = useCallback((message: any) => {
    if (socketRef.current?.readyState === WebSocket.OPEN) {
      socketRef.current.send(JSON.stringify(message));
      return true;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç:`, message);
    }
    return false;
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä—ã
  const setCameraState = useCallback((enabled: boolean) => {
    return sendMessage({
      type: 'camera_state_change',
      enabled
    });
  }, [sendMessage]);

  // –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞
  const selectSlot = useCallback((slotNumber: number) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤ localStorage
    console.log(`üéØ –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ ${slotNumber}, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage`);
    saveSlotToStorage(slotNumber);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    return sendMessage({
      type: 'select_slot',
      slotNumber
    });
  }, [saveSlotToStorage, sendMessage]);
  
  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
  const releaseSlot = useCallback(() => {
    // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –∏–∑ localStorage
    clearSlotStorage();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    return sendMessage({
      type: 'release_slot'
    });
  }, [clearSlotStorage, sendMessage]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è userSlot –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
  useEffect(() => {
    // –í—ã–≤–æ–¥–∏–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try {
      console.log(`üîç –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï –í LOCALSTORAGE:`);
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.includes(SLOT_STORAGE_KEY_BASE)) {
          const value = localStorage.getItem(key);
          console.log(`- ${key}: ${value}`);
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ localStorage
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
    if (state.userSlot) {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç ${state.userSlot} –¥–ª—è ${userId} –≤ localStorage (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)`);
      saveSlotToStorage(state.userSlot);
    }
  }, [state.userSlot, saveSlotToStorage, userId]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏/–æ–∫–Ω–∞
  useEffect(() => {
    const handleBeforeUnload = () => {
      console.log('üö™ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç –≤ localStorage');
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        if (state.userSlot) {
          console.log(`üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç ${state.userSlot} –¥–ª—è ${userId} –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º`);
          saveSlotToStorage(state.userSlot);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º:', error);
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('pagehide', handleBeforeUnload); // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è iOS
    window.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        handleBeforeUnload();
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('pagehide', handleBeforeUnload);
      window.removeEventListener('visibilitychange', handleBeforeUnload);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      if (state.userSlot) {
        console.log('üîÑ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–µ –≤ localStorage');
        saveSlotToStorage(state.userSlot);
      }
    };
  }, [state.userSlot, saveSlotToStorage, userId]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π userId –≤ ref
    userIdRef.current = userId;
    console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ useSlots:', userId);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const connectWebSocket = () => {
      setState(prev => ({ ...prev, loading: true, error: null }));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/ws`;

      console.log(`üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket: ${wsUrl}, –ø–æ–ø—ã—Ç–∫–∞ #${reconnectAttempts.current + 1}`);
      
      // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const socket = new WebSocket(wsUrl);
      socketRef.current = socket;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      socket.onopen = () => {
        console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        setState(prev => ({ ...prev, connected: true, loading: false }));
        reconnectAttempts.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ window, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        let effectiveUserId = userIdRef.current;
        if (window.currentUserIdentity && window.currentUserIdentity !== 'undefined') {
          effectiveUserId = window.currentUserIdentity;
          console.log('üë§ –ò—Å–ø–æ–ª—å–∑—É—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:', effectiveUserId);
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –∏–∑ localStorage
        const preferredSlot = getSavedSlot();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç
        console.log('üì≤ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', effectiveUserId, 
                    preferredSlot ? `—Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º —Å–ª–æ—Ç–æ–º ${preferredSlot}` : '–±–µ–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞');
        
        sendMessage({
          type: 'register',
          userId: effectiveUserId,
          preferredSlot: preferredSlot
        });
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      socket.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        setState(prev => ({ 
          ...prev, 
          error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 
          loading: false,
          connected: false 
        }));
        reconnectAttempts.current += 1;
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      socket.onclose = () => {
        console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        setState(prev => ({ ...prev, connected: false }));
        
        // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
        if (state.userSlot) {
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç ${state.userSlot} –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket`);
          saveSlotToStorage(state.userSlot);
        }
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const reconnectDelay = Math.min(5000 + (reconnectAttempts.current * 1000), 30000);
        console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${reconnectDelay/1000} —Å–µ–∫—É–Ω–¥...`);
        
        setTimeout(() => {
          if (socketRef.current === socket) {
            connectWebSocket();
          }
        }, reconnectDelay);
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      socket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üì© WebSocket –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
          
          switch (data.type) {
            case 'slots_update': {
              // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–∞—Ö
              const slots: Record<number, string> = {};
              let userSlot: number | null = null;
              
              // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–ª–æ—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
              data.slots.forEach((slot: SlotInfo) => {
                slots[slot.slotNumber] = slot.userId;
                console.log(`üéØ –°–ª–æ—Ç ${slot.slotNumber} –∑–∞–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${slot.userId}`);
                
                // –í–æ–∑–º–æ–∂–Ω–æ –¥–≤–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - —Ç–µ–∫—É—â–∏–π –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π
                const currentId = userIdRef.current;
                const globalId = window.currentUserIdentity;
                
                console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ—Ç ${slot.slotNumber}: ${slot.userId} —Å ${currentId} –∏ ${globalId}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–∏–±–æ —Ç–µ–∫—É—â–µ–º—É, –ª–∏–±–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
                if (slot.userId === currentId || 
                    (globalId && slot.userId === globalId)) {
                  userSlot = slot.slotNumber;
                  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userSlot}`);
                  
                  // –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–ª–æ—Ç
                  saveSlotToStorage(slot.slotNumber);
                }
              });
              
              console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–æ–≤:', 
                          '—Ç–µ–∫—É—â–∏–π userSlot =', userSlot, 
                          '–≤—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ =', Object.keys(slots).length);
              
              setState(prev => {
                const newState = { 
                  ...prev, 
                  slots,
                  userSlot
                };
                console.log('üîÑ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', newState);
                return newState;
              });
              break;
            }
            
            case 'camera_states_update': {
              // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–∞–º–µ—Ä
              const cameraStates = data.cameraStates || {};
              console.log('üì∑ –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä:', cameraStates);
              
              setState(prev => ({
                ...prev,
                cameraStates
              }));
              break;
            }
            
            case 'slot_busy': {
              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç
              console.log(`üö´ –°–ª–æ—Ç ${data.slotNumber} —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
              break;
            }
            
            case 'ping': {
              // –û—Ç–≤–µ—Ç –Ω–∞ –ø–∏–Ω–≥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
              sendMessage({ type: 'pong' });
              break;
            }
            
            default:
              console.log('‚ùì –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };
    };

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connectWebSocket();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      const socket = socketRef.current;
      if (socket) {
        socket.onclose = null; // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.close();
        socketRef.current = null;
      }
    };
  }, [userId, sendMessage, getSavedSlot, saveSlotToStorage, state.userSlot]);

  return {
    ...state,
    selectSlot,
    releaseSlot,
    setCameraState
  };
}